type UserType {
  id: ID!

  email: String!

  username: String!

  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Location {
  latitude: Float!

  longitude: Float!

  altitude: Float!

  time: Timestamp!

  speed: Float!

  accuracy: Float!

  bearing: Float!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Adventure {
  id: ID!

  title: String!

  description: String!

  calories: Int!

  distance: Float!

  duration: BigInt!

  startTime: DateTime!

  endTime: DateTime!

  speed: Float!

  polyline: String!

  locations: [Location!]!

  createdAt: DateTime!

  updatedAt: DateTime!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type OptType {
  email: String!
}

type JWTokensType {
  access_token: String!

  refresh_token: String!
}

type UploadedFile {
  path: String!
}

type Query {
  user: UserType!

  adventures: [Adventure!]!

  adventure(id: String!): Adventure!
}

type Mutation {
  createUser(user: CreateUserInput!): UserType!

  createAdventures(params: [AdventureInput!]!): [Adventure!]!

  login(email: String!, password: String!): JWTokensType!

  sendVerificationCode(email: String!): OptType!

  uploadFile(file: Upload!): UploadedFile!
}

input CreateUserInput {
  username: String!

  email: String!

  password: String!

  gender: Gender!
}

enum Gender {
  MALE

  FEMALE

  UNSPECIFIED
}

input AdventureInput {
  uuid: String!

  title: String!

  description: String!

  altitude: Float!

  calories: Int!

  distance: Float!

  duration: BigInt!

  startTime: DateTime!

  endTime: DateTime!

  speed: Float!

  polyline: String!

  image: String!

  locations: [LocationInput!]!
}

input LocationInput {
  writeTime: Float!

  timezone: String!

  latitude: Float!

  longitude: Float!

  altitude: Float!

  time: Timestamp!

  speed: Float!

  accuracy: Float!

  bearing: Float!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

schema {
  query: Query
  mutation: Mutation
}
