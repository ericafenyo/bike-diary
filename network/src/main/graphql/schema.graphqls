type UserType {
  id: ID!

  uuid: String!

  email: String!

  username: String!

  createdAt: DateTime!

  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Location {
  latitude: Float!

  longitude: Float!

  altitude: Float!

  time: Timestamp!

  speed: Float!

  accuracy: Float!

  bearing: Float!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Trace {
  timezone: String!

  writeTime: DateTime!

  location: Location!
}

type Adventure {
  id: ID!

  uuid: String!

  title: String!

  description: String!

  altitude: Float!

  calories: Int!

  distance: Float!

  duration: Int!

  startTime: DateTime!

  endTime: DateTime!

  speed: Float!

  polyline: String!

  traces: [Trace!]!

  createdAt: DateTime!

  updatedAt: DateTime!
}

type OptType {
  email: String!
}

type JWTokensType {
  access_token: String!

  refresh_token: String!
}

type Query {
  getUser: String!

  adventures: [Adventure!]!
}

type Mutation {
  createUser(user: CreateUserInput!): UserType!

  addAdventures(params: [AdventureInput!]!): [Adventure!]!

  tokens(email: String!, password: String!): JWTokensType!

  sendVerificationCode(email: String!): OptType!
}

input CreateUserInput {
  username: String!

  email: String!

  password: String!

  gender: Gender!
}

enum Gender {
  MALE

  FEMALE

  UNSPECIFIED
}

input AdventureInput {
  uuid: String!

  title: String!

  description: String!

  altitude: Float!

  calories: Int!

  distance: Float!

  duration: Int!

  startTime: DateTime!

  endTime: DateTime!

  speed: Float!

  polyline: String!

  image: String!

  traces: [TraceInput!]!
}

input TraceInput {
  timezone: String!

  writeTime: DateTime!

  location: LocationInput!
}

input LocationInput {
  latitude: Float!

  longitude: Float!

  altitude: Float!

  time: Timestamp!

  speed: Float!

  accuracy: Float!

  bearing: Float!
}

schema {
  query: Query
  mutation: Mutation
}
